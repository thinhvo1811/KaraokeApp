/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.itextpdf.text.Document;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import connect.Connect;
import dao.CT_HoaDon_DAO;
import dao.DichVu_DAO;
import dao.HoaDon_DAO;
import dao.KhachHang_DAO;
import dao.LoaiDichVu_DAO;
import dao.NhanVien_DAO;
import dao.Phong_DAO;
import entity.CT_HoaDon;
import entity.DichVu;
import entity.HoaDon;
import entity.LoaiDichVu;

/**
 *
 * @author dell
 */
public class JPanel_XLLapHoaDon extends javax.swing.JPanel {
	private Phong_DAO phong_DAO;
	private KhachHang_DAO khachHang_DAO;
	private NhanVien_DAO nhanVien_DAO;
	private DichVu_DAO dv_DAO;
	private HoaDon_DAO hoaDon_DAO;
	private CT_HoaDon_DAO cthd_DAO;
	private LoaiDichVu_DAO ldv_DAO;
	private DefaultTableModel model;
	private DefaultTableModel model2;
	private long millis;

    /**
     * Creates new form JPanelXLLapPhieuDP
     */
    public JPanel_XLLapHoaDon() {
        initComponents();
        tblDanhSachHD.getTableHeader().setFont(new Font("Segoe UI", Font.PLAIN, 18));
        tblDanhSachDV.getTableHeader().setFont(new Font("Segoe UI", Font.PLAIN, 18));
        model = (DefaultTableModel) tblDanhSachHD.getModel();
        model2 = (DefaultTableModel) tblDanhSachDV.getModel();
 		try {
 			Connect.getInstance().connect();
 		} catch (SQLException e1) {
 			// TODO Auto-generated catch block
 			e1.printStackTrace();
 		}
 		phong_DAO = new Phong_DAO();
 		hoaDon_DAO = new HoaDon_DAO();
 		cthd_DAO = new CT_HoaDon_DAO();
 		khachHang_DAO = new KhachHang_DAO();
 		nhanVien_DAO = new NhanVien_DAO();
 		dv_DAO = new DichVu_DAO();
 		ldv_DAO = new LoaiDichVu_DAO();
 		DocDuLieuDatabaseVaoTable();
 		loadCBBLoaiDV(cboLoaiDV);
// 		loadCBBTenDV(cboTenDV);
 		millis=System.currentTimeMillis();
 		cboGioRa.setSelectedItem(new java.sql.Time(millis).toString().substring(0,2));
 		cboPhutRa.setSelectedItem(new java.sql.Time(millis).toString().substring(3,5));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDanhSachHD = new javax.swing.JPanel();
        lblTimHD = new javax.swing.JLabel();
        txtTimHD = new javax.swing.JTextField();
        btnTimHD = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDanhSachHD = new javax.swing.JTable();
        lblGioRa = new javax.swing.JLabel();
        cboGioRa = new javax.swing.JComboBox<>();
        lblHaiCham = new javax.swing.JLabel();
        cboPhutRa = new javax.swing.JComboBox<>();
        btnTraPhong = new javax.swing.JButton();
        pnlThongTinCTHD = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDanhSachDV = new javax.swing.JTable();
        lblKhachHang = new javax.swing.JLabel();
        lblTenKhachHang = new javax.swing.JLabel();
        lblSDT = new javax.swing.JLabel();
        lblSoDT = new javax.swing.JLabel();
        pnlChonDV = new javax.swing.JPanel();
        lblLoaiDV = new javax.swing.JLabel();
        cboLoaiDV = new javax.swing.JComboBox<>();
        lblTenDV = new javax.swing.JLabel();
        cboTenDV = new javax.swing.JComboBox<>();
        lblSoLuong = new javax.swing.JLabel();
        spnSoLuong = new javax.swing.JSpinner();
        btnThemDV = new javax.swing.JButton();
        btnCapNhatDV = new javax.swing.JButton();
        btnXoaDV = new javax.swing.JButton();
        lblDonViTinh = new javax.swing.JLabel();
        pnlThanhToan = new javax.swing.JPanel();
        lblTongTien = new javax.swing.JLabel();
        txtTongTien = new javax.swing.JTextField();
        lblTienNhan = new javax.swing.JLabel();
        txtTienNhan = new javax.swing.JTextField();
        lblTienThua = new javax.swing.JLabel();
        btnThanhToan = new javax.swing.JButton();
        chkXuatHD = new javax.swing.JCheckBox();
        txtTienThua = new javax.swing.JTextField();

        pnlDanhSachHD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách Hóa Đơn Chưa Thanh Toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 20))); // NOI18N
        pnlDanhSachHD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        lblTimHD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTimHD.setText("Tìm Hóa Đơn:");

        txtTimHD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTimHD.setText("Nhập vào tên phòng muốn tìm");
		txtTimHD.addFocusListener(new FocusListener() {
			
			@Override
			public void focusLost(FocusEvent e) {
				if(txtTimHD.getText().trim().equals("")) {
					txtTimHD.setText("Nhập vào tên phòng muốn tìm");
				}
			}
			@Override
			public void focusGained(FocusEvent e) {
				if(txtTimHD.getText().trim().equals("Nhập vào tên phòng muốn tìm")) {
					txtTimHD.setText("");
				}
			}
		});
        
        btnTimHD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnTimHD.setBackground(new Color(0,191,255));
        btnTimHD.setIcon(new javax.swing.ImageIcon("icon/TC_icon.png")); // NOI18N
        btnTimHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnTimHDActionPerformed(evt);
            }
        });
        
        tblDanhSachHD.setFont(new java.awt.Font("Segoe UI", 0, 18));
        tblDanhSachHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Mã HD", "Khách Hàng", "Phòng", "Giờ Vào", "Trạng Thái"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblDanhSachHD.setRowHeight(30);
        tblDanhSachHD.getTableHeader().setBackground(new Color(255, 127, 0));
        tblDanhSachHD.setShowHorizontalLines(true);
        tblDanhSachHD.setShowVerticalLines(true);
        jScrollPane3.setViewportView(tblDanhSachHD);

        lblGioRa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblGioRa.setText("Giờ Ra:");

        cboGioRa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cboGioRa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        lblHaiCham.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblHaiCham.setText(":");

        cboPhutRa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cboPhutRa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        btnTraPhong.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnTraPhong.setBackground(new Color(0,191,255));
        btnTraPhong.setText("Trả Phòng");
        btnTraPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnTraPhongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDanhSachHDLayout = new javax.swing.GroupLayout(pnlDanhSachHD);
        pnlDanhSachHD.setLayout(pnlDanhSachHDLayout);
        pnlDanhSachHDLayout.setHorizontalGroup(
            pnlDanhSachHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachHDLayout.createSequentialGroup()
                .addGroup(pnlDanhSachHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachHDLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3))
                    .addGroup(pnlDanhSachHDLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(lblTimHD, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTimHD, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTimHD, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pnlDanhSachHDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblGioRa, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboGioRa, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHaiCham)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboPhutRa, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(btnTraPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDanhSachHDLayout.setVerticalGroup(
            pnlDanhSachHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachHDLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlDanhSachHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblTimHD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTimHD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btnTimHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDanhSachHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTraPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboPhutRa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHaiCham, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboGioRa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGioRa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlThongTinCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông Tin Chi Tiết Hóa Đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 20))); // NOI18N
        pnlThongTinCTHD.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        tblDanhSachDV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tblDanhSachDV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "STT", "Dịch Vụ", "Đơn Giá", "Số Lượng", "Đơn Vị Tính", "Thành Tiền (VNĐ)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblDanhSachDV.setRowHeight(30);
        tblDanhSachDV.getTableHeader().setBackground(new Color(255, 127, 0));
        tblDanhSachDV.setShowHorizontalLines(true);
        tblDanhSachDV.setShowVerticalLines(true);
        jScrollPane2.setViewportView(tblDanhSachDV);

        lblKhachHang.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblKhachHang.setText("Khách Hàng:");

        lblTenKhachHang.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        lblSDT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSDT.setText("Số Điện Thoại:");

        lblSoDT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlThongTinCTHDLayout = new javax.swing.GroupLayout(pnlThongTinCTHD);
        pnlThongTinCTHD.setLayout(pnlThongTinCTHDLayout);
        pnlThongTinCTHDLayout.setHorizontalGroup(
            pnlThongTinCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinCTHDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThongTinCTHDLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(pnlThongTinCTHDLayout.createSequentialGroup()
                        .addComponent(lblKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTenKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSoDT, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                        .addGap(14, 14, 14))))
        );
        pnlThongTinCTHDLayout.setVerticalGroup(
            pnlThongTinCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThongTinCTHDLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlThongTinCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTenKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSoDT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        pnlChonDV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chọn Dịch Vụ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N
        pnlChonDV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        lblLoaiDV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblLoaiDV.setText("Loại Dịch Vụ:");

        cboLoaiDV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cboLoaiDV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        cboLoaiDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	cboLoaiDVActionPerformed(evt);
            }
        });
        
        lblTenDV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTenDV.setText("Tên Dịch Vụ:");

        cboTenDV.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cboTenDV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
//        cboTenDV.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//            	cboTenDVActionPerformed(evt);
//            }
//        });

        
        lblSoLuong.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSoLuong.setText("Số Lượng:");

        spnSoLuong.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnThemDV.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnThemDV.setBackground(new Color(0,191,255));
        btnThemDV.setIcon(new javax.swing.ImageIcon("icon/Them_icon.png")); // NOI18N
        btnThemDV.setText("Thêm");
        btnThemDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnThemDVActionPerformed(evt);
            }
        });


        btnCapNhatDV.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnCapNhatDV.setBackground(new Color(0,191,255));
        btnCapNhatDV.setIcon(new javax.swing.ImageIcon("icon/CN-icon.png")); // NOI18N
        btnCapNhatDV.setText("Cập Nhật");
        btnCapNhatDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnCapNhatDVActionPerformed(evt);
            }
        });

        btnXoaDV.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnXoaDV.setBackground(new Color(0,191,255));
        btnXoaDV.setIcon(new javax.swing.ImageIcon("icon/Xoa_icon.png")); // NOI18N
        btnXoaDV.setText("Xóa");
        btnXoaDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnXoaDVActionPerformed(evt);
            }
        });

        lblDonViTinh.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlChonDVLayout = new javax.swing.GroupLayout(pnlChonDV);
        pnlChonDV.setLayout(pnlChonDVLayout);
        pnlChonDVLayout.setHorizontalGroup(
            pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlChonDVLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlChonDVLayout.createSequentialGroup()
                        .addComponent(lblLoaiDV, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboLoaiDV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnThemDV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlChonDVLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblTenDV, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(cboTenDV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSoLuong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDonViTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(pnlChonDVLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(btnCapNhatDV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnXoaDV, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122))))
        );
        pnlChonDVLayout.setVerticalGroup(
            pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChonDVLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboTenDV, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(lblSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(spnSoLuong, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(lblDonViTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTenDV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(cboLoaiDV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(lblLoaiDV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(pnlChonDVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThemDV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCapNhatDV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoaDV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlThanhToan.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông Tin Thanh Toán", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 20))); // NOI18N
        pnlThanhToan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        lblTongTien.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTongTien.setText("Tổng Tiền (VNĐ): ");

        txtTongTien.setEditable(false);
        txtTongTien.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTongTien.setBorder(null);


        lblTienNhan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTienNhan.setText("Tiền Nhận (VNĐ): ");

        txtTienNhan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTienNhan.addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				Object obj = e.getSource();
				if (obj.equals(txtTienNhan)) {
					if (txtTienNhan.getText().equals("")) {
						txtTienThua.setText("");
					}
					try {
						double tienNhan = Double.parseDouble(txtTienNhan.getText());
						double tongTien = Double.parseDouble(txtTongTien.getText());
						if (tienNhan < tongTien) {
							txtTienThua.setText("Nhỏ hơn tổng tiền hóa đơn");
						} else {
							double tienThua = tienNhan - tongTien;
							txtTienThua.setText(String.valueOf(Math.round(tienThua)));
						}
					} catch (Exception e2) {
					}
				}
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
		});


        lblTienThua.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTienThua.setText("Tiền Thừa (VNĐ): ");

        btnThanhToan.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        btnThanhToan.setBackground(new Color(0,191,255));
        btnThanhToan.setIcon(new javax.swing.ImageIcon("icon/TT_icon.png")); // NOI18N
        btnThanhToan.setText("Thanh Toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnThanhToanActionPerformed(evt);
            }
        });
        

        chkXuatHD.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        chkXuatHD.setText("Xuất Hóa Đơn");

        txtTienThua.setEditable(false);
        txtTienThua.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTienThua.setBorder(null);


        javax.swing.GroupLayout pnlThanhToanLayout = new javax.swing.GroupLayout(pnlThanhToan);
        pnlThanhToan.setLayout(pnlThanhToanLayout);
        pnlThanhToanLayout.setHorizontalGroup(
            pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhToanLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThanhToanLayout.createSequentialGroup()
                        .addComponent(lblTienNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTienNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThanhToanLayout.createSequentialGroup()
                        .addComponent(lblTienThua, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTienThua, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThanhToanLayout.createSequentialGroup()
                        .addComponent(lblTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(76, 76, 76)
                .addGroup(pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkXuatHD, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );
        pnlThanhToanLayout.setVerticalGroup(
            pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhToanLayout.createSequentialGroup()
                .addGroup(pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTongTien, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTienNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTienNhan, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(btnThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlThanhToanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTienThua, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkXuatHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTienThua, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlDanhSachHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlChonDV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlThongTinCTHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlThongTinCTHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDanhSachHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlChonDV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlThanhToan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

		tblDanhSachHD.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				int row = tblDanhSachHD.getSelectedRow();

				lblTenKhachHang.setText(model.getValueAt(row, 1).toString());
				lblSoDT.setText(khachHang_DAO.getSDTTheoMaHD(model.getValueAt(row, 0).toString()));
				DocDuLieuDatabaseVaoTableCTHD();
				if(model2.getRowCount()!=0) {
					double tongTien = 0;
			    	for(int i = 0; i<model2.getRowCount(); i++) {
				    	tongTien = tongTien + Double.parseDouble(model2.getValueAt(i, 5).toString());
				    		
					}
					txtTongTien.setText(String.valueOf(Math.round(tongTien)));
				}
				else {
					txtTongTien.setText("");
				}
			}
		});
		
		tblDanhSachDV.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				if(!model2.getValueAt(tblDanhSachDV.getSelectedRow(), 4).toString().equals("Giờ")) {
					int row = tblDanhSachDV.getSelectedRow();

					cboTenDV.setSelectedItem(model2.getValueAt(row, 1).toString());
					spnSoLuong.setValue(Integer.parseInt(model2.getValueAt(row, 3).toString()));
				}
			}
		});
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
    	if (txtTimHD.getText().trim().equals("Nhập vào tên phòng muốn tìm")) {
//			JLabel lbl1 = new JLabel("Vui lòng nhập tên phòng của hóa đơn bạn muốn tìm!");
//			lbl1.setFont(new Font("Arial", Font.PLAIN, 18));
//    		JOptionPane.showMessageDialog(this, lbl1);
     		DocDuLieuDatabaseVaoTable();
		}
    	else {
			JLabel lbl2 = new JLabel("Không tìm thấy hóa đơn");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
        	if(hoaDon_DAO.getHDTheoPhong(txtTimHD.getText())==null) {
    			JOptionPane.showMessageDialog(this, lbl2);
    		}
    		else {
    	    	model.setRowCount(0);
    			ArrayList<HoaDon> dsHD = hoaDon_DAO.getHDTheoPhong(txtTimHD.getText());
    			for (HoaDon hd : dsHD) {
					String tt = "Đã Thanh Toán";
					if(hd.isTrangThai()==false)
						tt="Chưa Thanh Toán";	
					Object [] row = {hd.getMaHoaDon(),hd.getKhachhang().getTenKhachHang(),hd.getPhong().getTenPhong(),hd.getGioVao(),tt};
					model.addRow(row);
    			}
    		}
    	}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    private void btnTraPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
		int dem=0;
    	for(int i = 0; i<model2.getRowCount(); i++) {
	    	if(model2.getValueAt(i, 4).toString().equals("Giờ")) {
	    		dem++;
	    	}
		}
    	if(dem==0) {
        	if(tblDanhSachHD.getSelectedRow()==-1) {
    			JLabel lbl3 = new JLabel("Vui lòng chọn phòng muốn trả");
    			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
    			JOptionPane.showMessageDialog(this, lbl3);
    		}
    		else {
    			float soPhut=0;
    			if(Float.parseFloat(cboGioRa.getSelectedItem().toString()) >= Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2))) {
    				if(Float.parseFloat(cboGioRa.getSelectedItem().toString()) > Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2))) {
        				soPhut = (Float.parseFloat(cboGioRa.getSelectedItem().toString())-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2)))*60 + (Float.parseFloat(cboPhutRa.getSelectedItem().toString())-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(3,5)));
    				}
    				else if(Float.parseFloat(cboGioRa.getSelectedItem().toString()) == Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2)) && Float.parseFloat(cboPhutRa.getSelectedItem().toString()) >= Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(3,5))) {
        				soPhut = (Float.parseFloat(cboGioRa.getSelectedItem().toString())-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2)))*60 + (Float.parseFloat(cboPhutRa.getSelectedItem().toString())-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(3,5)));
    				}
    				else {
        				soPhut = (24-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2)) + Float.parseFloat(cboGioRa.getSelectedItem().toString()))*60 + (Float.parseFloat(cboPhutRa.getSelectedItem().toString())-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(3,5)));
    				}
    			}
    			else {
    				soPhut = (24-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(0,2)) + Float.parseFloat(cboGioRa.getSelectedItem().toString()))*60 + (Float.parseFloat(cboPhutRa.getSelectedItem().toString())-Float.parseFloat(model.getValueAt(tblDanhSachHD.getSelectedRow(), 3).toString().substring(3,5)));
    			}
    			float soGio = soPhut/60;

    			Object [] row = {model2.getRowCount()+1,model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString(),Math.round(phong_DAO.getGiaTheoTenP(model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString())),(float) Math.round(soGio * 100) / 100,"Giờ", Math.round(phong_DAO.getGiaTheoTenP(model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString())* (float) Math.round(soGio * 100) / 100)};
    			model2.addRow(row);
    			if(txtTongTien.getText().equals("")) {
    				txtTongTien.setText(String.valueOf(Math.round(phong_DAO.getGiaTheoTenP(model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString())* (float) Math.round(soGio * 100) / 100)));
    			}
    			else {
    				txtTongTien.setText(String.valueOf(Math.round(phong_DAO.getGiaTheoTenP(model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString())* (float) Math.round(soGio * 100) / 100)+Math.round(Double.parseDouble(txtTongTien.getText()))));
    			}
    			hoaDon_DAO.updateGioRa(new Time(Integer.parseInt(cboGioRa.getSelectedItem().toString()), Integer.parseInt(cboPhutRa.getSelectedItem().toString()), 0), Math.round(phong_DAO.getGiaTheoTenP(model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString())* (float) Math.round(soGio * 100) / 100), model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString());
    		}

    	}
    	else {
			JLabel lbl3 = new JLabel("Phòng này đã được trả rồi");
			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl3);
    	}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    private void btnThemDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
//    	if(model2.getRowCount()==0) {
//			JLabel lbl2 = new JLabel("Vui lòng trả phòng trước khi thêm dịch vụ");
//			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
//			JOptionPane.showMessageDialog(this, lbl2);
//    	}
		if(tblDanhSachHD.getSelectedRow()==-1) {
			JLabel lbl3 = new JLabel("Vui lòng chọn hóa đơn");
			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl3);
		}
		else if(cboTenDV.getSelectedItem().toString().equals("Dịch Vụ")) {
			JLabel lbl2 = new JLabel("Vui lòng chọn dịch vụ");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else if(Integer.parseInt(spnSoLuong.getValue().toString())<=0) {
			JLabel lbl2 = new JLabel("Số lượng phải lớn hơn 0");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else if(Integer.parseInt(spnSoLuong.getValue().toString())>dv_DAO.getSLTheoTen(cboTenDV.getSelectedItem().toString())) {
			JLabel lbl2 = new JLabel("Số lượng trong kho không đủ");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else {
    		int dem = 0;
        	for(int i = 0; i<model2.getRowCount(); i++) {
    	    	if(model2.getValueAt(i, 1).toString().equals(cboTenDV.getSelectedItem().toString())) {
    	    		dem++;
    	    	}
    		}
        	if(dem==0) {
        		double tongTien = 0;
        		CT_HoaDon ct = new CT_HoaDon(new HoaDon(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()), new DichVu(dv_DAO.getMaTheoTen(cboTenDV.getSelectedItem().toString())), dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString()), Integer.parseInt(spnSoLuong.getValue().toString()), dv_DAO.getDVTTheoTen(cboTenDV.getSelectedItem().toString()));
        		cthd_DAO.addCTHD(ct);
        		if(!txtTongTien.getText().equals("")) {
                	tongTien = Double.parseDouble(txtTongTien.getText());
        		}
        		Object [] row = {model2.getRowCount()+1,cboTenDV.getSelectedItem().toString(), Math.round(dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString())),spnSoLuong.getValue(),dv_DAO.getDVTTheoTen(cboTenDV.getSelectedItem().toString()),Math.round(dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString())*Float.parseFloat(spnSoLuong.getValue().toString()))};
        		model2.addRow(row);
        		tongTien = tongTien + Math.round(dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString())*Integer.parseInt(spnSoLuong.getValue().toString()));
        		txtTongTien.setText(String.valueOf(Math.round(tongTien)));
        		cboLoaiDV.setSelectedIndex(0);
        		spnSoLuong.setValue(0);
        	}
        	else {
    			JLabel lbl2 = new JLabel("Dịch vụ này đã được thêm vào hóa đơn");
    			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
    			JOptionPane.showMessageDialog(this, lbl2);
        	}
    	}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    private void btnCapNhatDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
		if(tblDanhSachDV.getSelectedRow()==-1) {
			JLabel lbl3 = new JLabel("Vui lòng chọn dịch vụ cần cập nhật");
			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl3);
		}
		else if(model2.getValueAt(tblDanhSachDV.getSelectedRow(), 4).toString().equals("Giờ")) {
			JLabel lbl3 = new JLabel("Không được cập nhật hóa đơn phòng");
			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl3);
    	}
		else if(!cboTenDV.getSelectedItem().toString().equals(model2.getValueAt(tblDanhSachDV.getSelectedRow(), 1).toString())) {
			JLabel lbl2 = new JLabel("Không được cập nhật tên dịch vụ");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
			cboTenDV.setSelectedItem(model2.getValueAt(tblDanhSachDV.getSelectedRow(), 1).toString());
    	}
    	else if(Integer.parseInt(spnSoLuong.getValue().toString())<=0) {
			JLabel lbl2 = new JLabel("Số lượng phải lớn hơn 0");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else if(Integer.parseInt(spnSoLuong.getValue().toString())>dv_DAO.getSLTheoTen(cboTenDV.getSelectedItem().toString())) {
			JLabel lbl2 = new JLabel("Số lượng trong kho không đủ");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else {
    		double tongTien = 0;
    		CT_HoaDon ct = new CT_HoaDon(new HoaDon(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()), new DichVu(dv_DAO.getMaTheoTen(cboTenDV.getSelectedItem().toString())), dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString()), Integer.parseInt(spnSoLuong.getValue().toString()), dv_DAO.getDVTTheoTen(cboTenDV.getSelectedItem().toString()));
    		cthd_DAO.updateCTHD(ct);
    		Object [] row = {model2.getRowCount()+1,cboTenDV.getSelectedItem().toString(), Math.round(dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString())),spnSoLuong.getValue(),dv_DAO.getDVTTheoTen(cboTenDV.getSelectedItem().toString()),Math.round(dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString())*Float.parseFloat(spnSoLuong.getValue().toString()))};
    		model2.setValueAt(spnSoLuong.getValue(), tblDanhSachDV.getSelectedRow(), 3);
    		model2.setValueAt(Math.round(dv_DAO.getGiaTheoTen(cboTenDV.getSelectedItem().toString())*Float.parseFloat(spnSoLuong.getValue().toString())), tblDanhSachDV.getSelectedRow(), 5);
        	for(int i = 0; i<model2.getRowCount(); i++) {
    	    	tongTien = tongTien + Double.parseDouble(model2.getValueAt(i, 5).toString());
    		}
    		txtTongTien.setText(String.valueOf(Math.round(tongTien)));
    		cboLoaiDV.setSelectedIndex(0);
    		spnSoLuong.setValue(0);
    	}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    private void btnXoaDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
		if(tblDanhSachDV.getSelectedRow()==-1) {
			JLabel lbl3 = new JLabel("Vui lòng chọn dịch vụ cần xóa");
			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl3);
		}
		else if(model2.getValueAt(tblDanhSachDV.getSelectedRow(), 4).toString().equals("Giờ")) {
			JLabel lbl3 = new JLabel("Không được xóa phòng ra khỏi hóa đơn");
			lbl3.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl3);
    	}
		else {
			JLabel lbl1 = new JLabel("Bạn có chắc muốn xóa dịch vụ này khỏi hóa đơn không?");
			lbl1.setFont(new Font("Arial", Font.PLAIN, 18));
			int ask = JOptionPane.showConfirmDialog(this, lbl1, "Cảnh Báo!", JOptionPane.YES_NO_OPTION);
			if(ask == JOptionPane.YES_OPTION) {
	    		double tongTien = 0;
		    	cthd_DAO.deleteCTHD(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString(), dv_DAO.getMaTheoTen(model2.getValueAt(tblDanhSachDV.getSelectedRow(), 1).toString()));
	        	for(int i = tblDanhSachDV.getSelectedRow(); i<model2.getRowCount(); i++) {
	        		model2.setValueAt(Integer.parseInt(model2.getValueAt(i, 0).toString())-1, i, 0);
	    		}
		    	model2.removeRow(tblDanhSachDV.getSelectedRow());
	        	for(int i = 0; i<model2.getRowCount(); i++) {
	    	    	tongTien = tongTien + Double.parseDouble(model2.getValueAt(i, 5).toString());
	    		}
	    		txtTongTien.setText(String.valueOf(Math.round(tongTien)));
	    		cboLoaiDV.setSelectedIndex(0);
	    		spnSoLuong.setValue(0);
				JLabel lbl2 = new JLabel("Xóa thành công");
				lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
				JOptionPane.showMessageDialog(this, lbl2);
			}
		}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
		int dem=0;
    	for(int i = 0; i<model2.getRowCount(); i++) {
	    	if(model2.getValueAt(i, 4).toString().equals("Giờ")) {
	    		dem++;
	    	}
		}
    	if(dem==0) {
			JLabel lbl2 = new JLabel("Vui lòng trả phòng trước khi thanh toán");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else if(txtTienNhan.getText().equals("")) {
			JLabel lbl2 = new JLabel("Vui lòng nhập số tiền nhận");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else if(Double.parseDouble(txtTienNhan.getText())<Double.parseDouble(txtTongTien.getText())) {
			JLabel lbl2 = new JLabel("Số tiền nhận phải lớn hơn tổng tiền");
			lbl2.setFont(new Font("Arial", Font.PLAIN, 18));
			JOptionPane.showMessageDialog(this, lbl2);
    	}
    	else {
    		if (chkXuatHD.isSelected()) {
    			    //Tạo ra 1 file PDF
    		        String path = System.getProperty("user.dir") + "\\exportFile\\xuatHoaDon\\" + model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString() + ".pdf";
    		        com.itextpdf.text.Font textFont = FontFactory.getFont("font/SVN-Arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 10); //10 is the size
    		        com.itextpdf.text.Font textFont24 = FontFactory.getFont("font/SVN-Arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 24); //30 is the size

    		        Document doc = new Document();
    		        try {
    		            PdfWriter.getInstance(doc, new FileOutputStream(path));
    		            doc.open();
    		            Paragraph karaokeName = new Paragraph("                          KARAOKE NICE\n", textFont24);
    		            doc.add(karaokeName);
    		            Paragraph karaokeNameDiaChi = new Paragraph("                                  Địa chỉ: 28 Nguyễn Văn Bảo, Phường 4, Quận Gò Vấp, Thành phố Hồ Chí Minh\n", textFont);
    		            doc.add(karaokeNameDiaChi);
    		            Paragraph karaokeNameSDT = new Paragraph("                                                                        Số điện thoại: 0797322972\n", textFont);
    		            doc.add(karaokeNameSDT);
    		            Paragraph starLine = new Paragraph("=========================================================================================", textFont);
    		            doc.add(starLine);

    		            //Thông tin nhân viên
    		            Paragraph paragraphMaNhanVienLine1 = new Paragraph("               Mã nhân viên: " + hoaDon_DAO.getNVTheoHD(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).getMaNV() + "                                                               Ngày lập hóa đơn: " + hoaDon_DAO.getNgayLapHD(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).toString() + "\n", textFont);
    		            doc.add(paragraphMaNhanVienLine1);
    		            Paragraph paragraphTenNhanVienLine2 = new Paragraph("               Tên nhân viên: " + hoaDon_DAO.getNVTheoHD(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).getTenNV(), textFont);
    		            doc.add(paragraphTenNhanVienLine2);
    		            doc.add(starLine);

    		            //Thông tin hóa đơn
    		            Paragraph paragraphMaHoaDonLine1 = new Paragraph("               Mã hóa đơn: " + model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString() + "                                                                 Mã khách hàng: " + hoaDon_DAO.getKHTheoHD(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).getMaKhachHang() + "\n", textFont);
    		            doc.add(paragraphMaHoaDonLine1);
    		            Paragraph paragraphMaHoaDonLine2 = new Paragraph("               Mã Phòng: " + phong_DAO.getMaTheoTenP(model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString()) + "                                                                       Tên khách hàng: " + hoaDon_DAO.getKHTheoHD(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).getTenKhachHang() + "\n", textFont);
    		            doc.add(paragraphMaHoaDonLine2);

    		            String soGio = "";
    		        	for(int i = 0; i<model2.getRowCount(); i++) {
    		    	    	if(model2.getValueAt(i, 4).toString().equals("Giờ")) {
    		    	    		soGio = model2.getValueAt(i, 3).toString();
    		    	    	}
    		    		}
    		            Paragraph paragraphMaHoaDonLine3 = new Paragraph("               Giờ vào: " + hoaDon_DAO.getGioVao(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).toString() + "                                                                     Số điện thoại: " + lblSoDT.getText() + "\n", textFont);
    		            doc.add(paragraphMaHoaDonLine3);
    		            Paragraph paragraphMaHoaDonLine4 = new Paragraph("               Giờ ra: " + hoaDon_DAO.getGioRa(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()).toString() + "                                                                        Tổng số giờ: " + soGio + "\n", textFont);
    		            doc.add(paragraphMaHoaDonLine4);
    		            doc.add(starLine);
    		            
//    		          //Dịch vụ Table
    		            Paragraph paragraph4 = new Paragraph("               Dịch vụ:", textFont);
    		            doc.add(paragraph4);
    		            Paragraph paragraph5 = new Paragraph("\n", textFont);
    		            doc.add(paragraph5);
    		            PdfPTable tbl = new PdfPTable(6);
    		            tbl.addCell(new Phrase("        STT", textFont));
    		            tbl.addCell(new Phrase("  Tên dịch vụ", textFont));
    		            tbl.addCell(new Phrase("         Giá", textFont));
    		            tbl.addCell(new Phrase("     Số lượng", textFont));
    		            tbl.addCell(new Phrase("   Đơn vị tính", textFont));
    		            tbl.addCell(new Phrase("   Thành tiền", textFont));
		            	int stt=0;
	            		DecimalFormat formatter = new DecimalFormat("###,###,###");
    		            for (int i = 0; i < tblDanhSachDV.getRowCount(); i++) {
    		            	if(!model2.getValueAt(i, 4).toString().equals("Giờ")) {
    		            		stt++;
        		                String ten = tblDanhSachDV.getValueAt(i, 1).toString();
        		                double gia = Double.parseDouble(tblDanhSachDV.getValueAt(i, 2).toString());
        		                String sl = tblDanhSachDV.getValueAt(i, 3).toString();
        		                String dvt = tblDanhSachDV.getValueAt(i, 4).toString();
        		                double thanhTien = Double.parseDouble(tblDanhSachDV.getValueAt(i, 5).toString());
        		                tbl.addCell(new Phrase(String.valueOf(stt), textFont));
        		                tbl.addCell(new Phrase(ten, textFont));
        		                tbl.addCell(new Phrase(formatter.format(gia)+" VNĐ", textFont));
        		                tbl.addCell(new Phrase(sl, textFont));
        		                tbl.addCell(new Phrase(dvt, textFont));
        		                tbl.addCell(new Phrase(formatter.format(thanhTien)+" VNĐ", textFont));
    		            	}
    		            }
    		            doc.add(tbl);
    		            doc.add(starLine);
    		            
    		            //Thông tin tổng tiền:
    		            double tienPhong = hoaDon_DAO.getTienPhong(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString()); 
    		            double tienDV = Double.parseDouble(txtTongTien.getText())-tienPhong;
    		            Paragraph paragraphTongTienLine1 = new Paragraph("               Tổng tiền dịch vụ: " + formatter.format(tienDV) + " VNĐ" + "                                               Tiền khách đưa: " + formatter.format(Double.parseDouble(txtTienNhan.getText())) + " VNĐ" + "\n", textFont);
    		            doc.add(paragraphTongTienLine1);
    		            Paragraph paragraphTongTienLine2 = new Paragraph("               Tổng tiền phòng: " + formatter.format(tienPhong) + " VNĐ" + "                                                Tiền trả khách: " + formatter.format(Double.parseDouble(txtTienThua.getText())) + " VNĐ" + "\n", textFont);
    		            doc.add(paragraphTongTienLine2);
    		            Paragraph paragraphTongTienLine5 = new Paragraph("               Tổng tiền: " + formatter.format(Double.parseDouble(txtTongTien.getText())) + " VNĐ" + "\n", textFont);
    		            doc.add(paragraphTongTienLine5);

    		            doc.add(starLine);
    		            Paragraph thanskMsg = new Paragraph("               Cảm ơn quý khách đã ủng hộ quán karaoke của chúng tôi. Xin kính chào và hẹn gặp lại quý khách !", textFont);
    		            doc.add(thanskMsg);
    		            doc.close();
    		            //open pdf
    		            OpenFilePDF.openBill(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString());

    		        } catch (Exception e) {
    		        	JOptionPane.showMessageDialog(this, e);
    		        }
    		}
    		List<DichVu> list = dv_DAO.getAllDichVu();
			for (DichVu dv : list) {	
				for (int i=0; i<model2.getRowCount();i++) {
					if(dv.getTenDichVu().equals(model2.getValueAt(i, 1).toString())) {
						dv_DAO.updateSoLuong(dv.getSoLuong()-Integer.parseInt(model2.getValueAt(i, 3).toString()),dv.getMaDichVu());
					}
				}
			}
    		hoaDon_DAO.updateTTHD(true, model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString());
    		phong_DAO.updateTTP(true, model.getValueAt(tblDanhSachHD.getSelectedRow(), 2).toString());;
     		DocDuLieuDatabaseVaoTable();
     		txtTongTien.setText("");
     		txtTienNhan.setText("");
     		txtTienThua.setText("");
     		lblTenKhachHang.setText("");
     		lblSoDT.setText("");
     		chkXuatHD.setSelected(false);
     		model2.setRowCount(0);
    	}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    private void cboLoaiDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimSDTActionPerformed
    	if(cboLoaiDV.getSelectedIndex()!=0) {
        	cboTenDV.removeAllItems();
    		for (DichVu dv : dv_DAO.getDichVuTheoLoai(cboLoaiDV.getSelectedItem().toString())) {
    			cboTenDV.addItem(dv.getTenDichVu());
    		}
//    			lblDonViTinh.setText(dv_DAO.getDVTTheoTen(cboTenDV.getSelectedItem().toString()));
    	}
    	else {
    		loadCBBTenDV(cboTenDV);
    	}
    }//GEN-LAST:event_txtTimSDTActionPerformed
    
    
	public void DocDuLieuDatabaseVaoTable() {
		model.setRowCount(0);
		List<HoaDon> list = hoaDon_DAO.getAllHoaDon();
				for (HoaDon hd : list) {	
					String tt = "Đã Thanh Toán";
					if(hd.isTrangThai()==false)
						tt="Chưa Thanh Toán";
					if(hd.isTrangThai()==false) {
						Object [] row = {hd.getMaHoaDon(),hd.getKhachhang().getTenKhachHang(),hd.getPhong().getTenPhong(),hd.getGioVao(),tt};
						model.addRow(row);
					}
				}
	}
	
	public void DocDuLieuDatabaseVaoTableCTHD() {
		model2.setRowCount(0);
		List<CT_HoaDon> list = cthd_DAO.getAllCTHDTheoMa(model.getValueAt(tblDanhSachHD.getSelectedRow(), 0).toString());
			for (CT_HoaDon cthd : list) {	
				Object [] row = {model2.getRowCount()+1,cthd.getDichvu().getTenDichVu(),Math.round(cthd.getGiaBan()),cthd.getSoLuong(),cthd.getDonViTinh(),Math.round(cthd.getGiaBan()*cthd.getSoLuong())};
				model2.addRow(row);
			}
	}
	
	public void loadCBBLoaiDV(JComboBox<String> c) {
		c.removeAllItems();
		c.addItem("Loại DV");
		for (LoaiDichVu ldv : ldv_DAO.getAllLoaiDichVu()) {
			c.addItem(ldv.getTenLoai());
		}
	}
	
	public void loadCBBTenDV(JComboBox<String> c) {
		c.removeAllItems();
		c.addItem("Dịch Vụ");
		for (DichVu dv : dv_DAO.getAllDichVu()) {
			c.addItem(dv.getTenDichVu());
		}
	}
	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapNhatDV;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnThemDV;
    private javax.swing.JButton btnTimHD;
    private javax.swing.JButton btnTraPhong;
    private javax.swing.JButton btnXoaDV;
    private javax.swing.JComboBox<String> cboGioRa;
    private javax.swing.JComboBox<String> cboLoaiDV;
    private javax.swing.JComboBox<String> cboPhutRa;
    private javax.swing.JComboBox<String> cboTenDV;
    private javax.swing.JCheckBox chkXuatHD;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblSoDT;
    private javax.swing.JLabel lblTenKhachHang;
    private javax.swing.JLabel lblDonViTinh;
    private javax.swing.JLabel lblGioRa;
    private javax.swing.JLabel lblHaiCham;
    private javax.swing.JLabel lblKhachHang;
    private javax.swing.JLabel lblLoaiDV;
    private javax.swing.JLabel lblSDT;
    private javax.swing.JLabel lblSoLuong;
    private javax.swing.JLabel lblTenDV;
    private javax.swing.JLabel lblTienNhan;
    private javax.swing.JLabel lblTienThua;
    private javax.swing.JLabel lblTimHD;
    private javax.swing.JLabel lblTongTien;
    private javax.swing.JPanel pnlChonDV;
    private javax.swing.JPanel pnlDanhSachHD;
    private javax.swing.JPanel pnlThanhToan;
    private javax.swing.JPanel pnlThongTinCTHD;
    private javax.swing.JSpinner spnSoLuong;
    private javax.swing.JTable tblDanhSachDV;
    private javax.swing.JTable tblDanhSachHD;
    private javax.swing.JTextField txtTienNhan;
    private javax.swing.JTextField txtTienThua;
    private javax.swing.JTextField txtTimHD;
    private javax.swing.JTextField txtTongTien;
    // End of variables declaration//GEN-END:variables
}
